{"version":3,"file":"static/js/901.bfec8f5f.chunk.js","mappings":"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","sources":["pages/BookTime.jsx","../node_modules/emailjs-com/es/store/store.js","../node_modules/emailjs-com/es/utils/validateParams.js","../node_modules/emailjs-com/es/models/EmailJSResponseStatus.js","../node_modules/emailjs-com/es/api/sendPost.js","../node_modules/emailjs-com/es/index.js","../node_modules/emailjs-com/es/methods/init/init.js","../node_modules/emailjs-com/es/methods/send/send.js","../node_modules/emailjs-com/es/methods/sendForm/sendForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport emailjs from 'emailjs-com';\r\nimport { API } from '../api';\r\n\r\nconst BookTime = () => {\r\n\tconst [name, setName] = useState('');\r\n\tconst [email, setEmail] = useState('');\r\n\tconst [date, setDate] = useState('');\r\n\tconst [message, setMessage] = useState('');\r\n\tconst [status, setStatus] = useState('');\r\n\r\n\tconst handleSubmit = async (e) => {\r\n\t\te.preventDefault();\r\n\r\n\t\t// Template parameters for EmailJS\r\n\t\tconst templateParams = {\r\n\t\t\tfrom_name: name,\r\n\t\t\tfrom_email: email,\r\n\t\t\tbooking_date: date,\r\n\t\t\tmessage: message,\r\n\t\t};\r\n\r\n\t\t// Send email using EmailJS\r\n\t\ttry {\r\n\t\t\tawait emailjs.send(\r\n\t\t\t\t'service_rn45rec', // EmailJS service ID\r\n\t\t\t\t'template_t3sedmj', // EmailJS template ID\r\n\t\t\t\ttemplateParams, // Template parameters\r\n\t\t\t\t'ouIL0a7IpDVcizQLE', // Public Key (User ID)\r\n\t\t\t);\r\n\t\t\tsetStatus('Bookingforespørsel sendt!');\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('EmailJS Error:', error);\r\n\t\t\tsetStatus('Kunne ikke sende bookingforespørsel.');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Send booking request to the backend\r\n\t\ttry {\r\n\t\t\tconst response = await API.post('/bookings', {\r\n\t\t\t\tname,\r\n\t\t\t\temail,\r\n\t\t\t\tdate,\r\n\t\t\t\tmessage,\r\n\t\t\t});\r\n\r\n\t\t\tif (response.status === 200 || response.status === 201) {\r\n\t\t\t\tsetStatus('Bookingforespørsel lagret!');\r\n\t\t\t\t// Reset form fields\r\n\t\t\t\tsetName('');\r\n\t\t\t\tsetEmail('');\r\n\t\t\t\tsetDate('');\r\n\t\t\t\tsetMessage('');\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Error on sending to backend:', error);\r\n\t\t\tsetStatus('Kunne ikke lagre bookingforespørselen.');\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"max-w-md mx-auto p-8 bg-white shadow-lg rounded-lg mt-16\">\r\n\t\t\t<h2 className=\"text-2xl font-bold mb-6\">Bestill en Time</h2>\r\n\t\t\t<form onSubmit={handleSubmit} className=\"space-y-6\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n\t\t\t\t\t\tNavn\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tvalue={name}\r\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t\tclassName=\"w-full p-3 border border-gray-300 rounded-lg\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n\t\t\t\t\t\tE-post\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\tvalue={email}\r\n\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t\tclassName=\"w-full p-3 border border-gray-300 rounded-lg\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n\t\t\t\t\t\tDato\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\ttype=\"date\"\r\n\t\t\t\t\t\tvalue={date}\r\n\t\t\t\t\t\tonChange={(e) => setDate(e.target.value)}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t\tclassName=\"w-full p-3 border border-gray-300 rounded-lg\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<label className=\"block text-sm font-medium text-gray-700 mb-2\">\r\n\t\t\t\t\t\tMelding\r\n\t\t\t\t\t</label>\r\n\t\t\t\t\t<textarea\r\n\t\t\t\t\t\tvalue={message}\r\n\t\t\t\t\t\tonChange={(e) => setMessage(e.target.value)}\r\n\t\t\t\t\t\tclassName=\"w-full p-3 border border-gray-300 rounded-lg\"\r\n\t\t\t\t\t\trows=\"4\"\r\n\t\t\t\t\t></textarea>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\tclassName=\"w-full bg-lollipop text-white py-3 rounded-lg hover:bg-earthyBrown transition-all\"\r\n\t\t\t\t>\r\n\t\t\t\t\tSend Bookingforespørsel\r\n\t\t\t\t</button>\r\n\t\t\t\t{status && <p className=\"mt-4 text-green-500\">{status}</p>}\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default BookTime;\r\n","export const store = {\n    _origin: 'https://api.emailjs.com',\n};\n","export const validateParams = (userID, serviceID, templateID) => {\n    if (!userID) {\n        throw 'The user ID is required. Visit https://dashboard.emailjs.com/admin/integration';\n    }\n    if (!serviceID) {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID) {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n    return true;\n};\n","export class EmailJSResponseStatus {\n    constructor(httpResponse) {\n        this.status = httpResponse.status;\n        this.text = httpResponse.responseText;\n    }\n}\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = (url, data, headers = {}) => {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.addEventListener('load', ({ target }) => {\n            const responseStatus = new EmailJSResponseStatus(target);\n            if (responseStatus.status === 200 || responseStatus.text === 'OK') {\n                resolve(responseStatus);\n            }\n            else {\n                reject(responseStatus);\n            }\n        });\n        xhr.addEventListener('error', ({ target }) => {\n            reject(new EmailJSResponseStatus(target));\n        });\n        xhr.open('POST', store._origin + url, true);\n        Object.keys(headers).forEach((key) => {\n            xhr.setRequestHeader(key, headers[key]);\n        });\n        xhr.send(data);\n    });\n};\n","import { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm };\nexport default {\n    init,\n    send,\n    sendForm,\n};\n","import { store } from '../../store/store';\n/**\n * Initiation\n * @param {string} userID - set the EmailJS user ID\n * @param {string} origin - set the EmailJS origin\n */\nexport const init = (userID, origin = 'https://api.emailjs.com') => {\n    store._userID = userID;\n    store._origin = origin;\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templatePrams - the template params, what will be set to the EmailJS template\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = (serviceID, templateID, templatePrams, userID) => {\n    const uID = userID || store._userID;\n    validateParams(uID, serviceID, templateID);\n    const params = {\n        lib_version: '3.2.0',\n        user_id: uID,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templatePrams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","import { store } from '../../store/store';\nimport { validateParams } from '../../utils/validateParams';\nimport { sendPost } from '../../api/sendPost';\nconst findHTMLForm = (form) => {\n    let currentForm;\n    if (typeof form === 'string') {\n        currentForm = document.querySelector(form);\n    }\n    else {\n        currentForm = form;\n    }\n    if (!currentForm || currentForm.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of form';\n    }\n    return currentForm;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {string} userID - the EmailJS user ID\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = (serviceID, templateID, form, userID) => {\n    const uID = userID || store._userID;\n    const currentForm = findHTMLForm(form);\n    validateParams(uID, serviceID, templateID);\n    const formData = new FormData(currentForm);\n    formData.append('lib_version', '3.2.0');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', uID);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n"],"names":["BookTime","name","setName","useState","email","setEmail","date","setDate","message","setMessage","status","setStatus","_jsxs","className","children","_jsx","onSubmit","async","e","preventDefault","templateParams","from_name","from_email","booking_date","emailjs","error","console","response","API","post","type","value","onChange","target","required","rows","store","_origin","validateParams","userID","serviceID","templateID","EmailJSResponseStatus","constructor","httpResponse","this","text","responseText","sendPost","url","data","headers","arguments","length","undefined","Promise","resolve","reject","xhr","XMLHttpRequest","addEventListener","_ref","responseStatus","_ref2","open","Object","keys","forEach","key","setRequestHeader","send","init","origin","_userID","templatePrams","uID","params","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","sendForm","form","currentForm","document","querySelector","nodeName","findHTMLForm","formData","FormData","append"],"sourceRoot":""}