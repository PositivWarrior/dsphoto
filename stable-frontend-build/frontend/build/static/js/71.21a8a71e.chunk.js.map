{"version":3,"file":"static/js/71.21a8a71e.chunk.js","mappings":"gJAGA,MA0HA,EAzFuBA,IAMhB,IANiB,IACvBC,EAAG,IACHC,EAAG,UACHC,EAAS,MACTC,EAAQ,QAAO,SACfC,GAAW,GACXL,EACA,MAAOM,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAOC,IAAYF,EAAAA,EAAAA,WAAS,IAC5BG,EAAcC,IAAmBJ,EAAAA,EAAAA,UAAS,IAG3CK,EAAc,CAAC,IAAK,IAAK,IAAK,KAAM,OAE1CC,EAAAA,EAAAA,YAAU,KAET,MAAMC,GAAmBC,EAAAA,EAAAA,IAAqBf,EAAK,IAAK,QACxDW,EAAgBG,GAGhB,MAAME,EAAM,IAAIC,MAChBD,EAAIhB,IAAMc,EACVE,EAAIE,OAAS,IAAMZ,GAAW,GAC9BU,EAAIG,QAAU,KAEbC,QAAQC,KAAK,6BAA8BP,GAC3CL,GAAS,GACT,MAAMa,EAAc,IAAIL,MACxBK,EAAYtB,IAAMA,EAClBsB,EAAYJ,OAAS,IAAMZ,GAAW,GACtCgB,EAAYH,QAAU,IAAMV,GAAS,EAAK,CAC1C,GACC,CAACT,IASJ,GAAIQ,EACH,OACCe,EAAAA,EAAAA,KAAA,OACCrB,UAAS,gDAAAsB,OAAkDtB,GAAYuB,UAEvEF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,2BAKT,MAAM,MAAEC,EAAK,OAAEC,GAA8B3B,EA/DrC4B,SAAS,YACT,CACNF,MAAO,IACPC,OAAQ,KAGH,CACND,MAAO,KACPC,OAAQ,KAyDT,OACCE,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAL,SAAA,CACEpB,IACAkB,EAAAA,EAAAA,KAAA,OAAKrB,UAAS,6BAAAsB,OAA+BtB,MAE9CqB,EAAAA,EAAAA,KAAA,OACCvB,IAAKU,GAAgBV,EACrB+B,OAxBKnB,EACLoB,KAAKC,GAAE,GAAAT,QAAQT,EAAAA,EAAAA,IAAqBf,EAAKiC,EAAI,QAAO,KAAAT,OAAIS,EAAE,OAC1DC,KAAK,MAuBLR,MAAOA,EACPC,OAAQA,EACR1B,IAAKA,EACLC,UAAS,GAAAsB,OAAKtB,EAAS,KAAAsB,OAAInB,EAAU,SAAW,IAChDA,QAASD,EAAW,QAAU,OAC9BD,MAAOA,EACPgC,MAAO,CAAEC,QAAS/B,EAAU,EAAI,GAChCgC,cAAejC,EAAW,OAAS,OACnCkC,QAAUC,IAETnB,QAAQC,KAAK,wBAAyBkB,EAAEC,OAAOxC,KAC3CuC,EAAEC,OAAOxC,MAAQA,IACpBuC,EAAEC,OAAOxC,IAAMA,EAChB,IAGDI,IACAmB,EAAAA,EAAAA,KAAA,QACCkB,IAAI,UACJC,KAAMhC,GAAgBV,EACtB2C,GAAG,QACHN,cAAc,WAGd,C,wHCjHL,MAsGA,EAtGoBO,KACnB,MAAOC,EAAaC,IAAkBvC,EAAAA,EAAAA,UAAS,KACxCF,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GACjCwC,GAAWC,EAAAA,EAAAA,MAuCjB,OAJAnC,EAAAA,EAAAA,YAAU,KAjCeoC,WACxB,IACC,MACMC,SADiBC,EAAAA,GAAIC,IAAI,YACTF,KAGhBG,EAAmB,IAAIC,IACvBC,EAAcL,EAAKM,QAAO,CAACC,EAAKC,KACrC,MAAMC,EAAWD,EAAMC,UAAY,UAMnC,OALKN,EAAiBO,IAAID,KACzBN,EAAiBQ,IAAIF,GACrBF,EAAIE,GAAY,IAEjBF,EAAIE,GAAUG,KAAKJ,GACZD,CAAG,GACR,CAAC,GAEEM,EAAgBC,OAAOC,KAAKV,GAAavB,KAAK2B,IAAQ,CAC3DO,GAAIP,EACJQ,MAAOR,EAASS,OAAO,GAAGC,cAAgBV,EAASW,MAAM,GACzDC,OAAQhB,EAAYI,GAAUa,MAC7B,CAACC,EAAGC,KAAC,IAAAC,EAAAC,EAAA,OAAa,QAARD,EAACF,EAAEI,aAAK,IAAAF,EAAAA,EAAI,IAAa,QAAZC,EAAKF,EAAEG,aAAK,IAAAD,EAAAA,EAAI,EAAE,QAI3C9B,EAAeiB,EAChB,CAAE,MAAOvD,GACRY,QAAQZ,MAAM,+BAAgCA,EAC/C,CAAC,QACAF,GAAW,EACZ,GAIAwE,EAAkB,GAChB,CAAC/B,EAASgC,WAET1E,GACIkB,EAAAA,EAAAA,KAACyD,EAAAA,EAAc,KAItBzD,EAAAA,EAAAA,KAAA,OAAK2C,GAAG,UAAUhE,UAAU,0BAAyBuB,UACpDI,EAAAA,EAAAA,MAAA,OAAK3B,UAAU,yBAAwBuB,SAAA,EACtCI,EAAAA,EAAAA,MAAA,MAAI3B,UAAU,uCAAsCuB,SAAA,CAAC,yBAEpDI,EAAAA,EAAAA,MAACoD,EAAAA,GAAM,CAAAxD,SAAA,EACNF,EAAAA,EAAAA,KAAA,SAAAE,SAAO,2BACPF,EAAAA,EAAAA,KAAA,QACC2D,KAAK,cACLC,QAAQ,oEAGT5D,EAAAA,EAAAA,KAAA,QACCkB,IAAI,aACJC,KAAK,+CACL0C,YAAY,eAEb7D,EAAAA,EAAAA,KAAA,QACCkB,IAAI,eACJC,KAAK,wDAIRnB,EAAAA,EAAAA,KAAA,OAAKrB,UAAU,uDAAsDuB,SACnEoB,EAAYb,KAAI,CAACqD,EAASC,KAC1BzD,EAAAA,EAAAA,MAAC0D,EAAAA,GAAI,CACJC,GAAE,YAAAhE,OAAc6D,EAAQnB,IAExBhE,UAAU,2GAA0GuB,SAAA,CAEnH4D,EAAQd,QAAUc,EAAQd,OAAOkB,OAAS,GAC1ClE,EAAAA,EAAAA,KAACmE,EAAAA,EAAc,CACd1F,IAAKqF,EAAQd,OAAO,GAAGoB,IACvB1F,IAAKoF,EAAQlB,MACbjE,UAAU,2BACVC,MAAM,2DACNC,SAAUkF,EAAQ,KAGnB/D,EAAAA,EAAAA,KAAA,OAAKrB,UAAU,2DAA0DuB,UACxEF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,0BAGLF,EAAAA,EAAAA,KAAA,OAAKrB,UAAU,oDAAmDuB,UACjEF,EAAAA,EAAAA,KAAA,MAAIrB,UAAU,0FAAyFuB,SACrG4D,EAAQlB,YAlBNkB,EAAQnB,YAyBZ,C","sources":["components/ImageOptimizer.jsx","pages/Gallery.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getOptimizedImageUrl } from '../api';\r\n\r\nconst createWebPUrl = (url) => {\r\n\t// Check if URL is from S3\r\n\tif (url.includes('ds-photo.s3.eu-north-1.amazonaws.com')) {\r\n\t\t// We'll use the Cloudinary service to convert and resize S3 images on-the-fly\r\n\t\t// Format: https://res.cloudinary.com/YOUR_CLOUD_NAME/image/fetch/f_auto,q_auto,w_[WIDTH]/S3_URL\r\n\r\n\t\t// Replace with your actual Cloudinary cloud name if you have one\r\n\t\t// Otherwise, look at implementing a serverless function that can transform images\r\n\t\t// const cloudinaryBase = 'https://res.cloudinary.com/your-cloud-name/image/fetch';\r\n\t\t// const encodedUrl = encodeURIComponent(url);\r\n\t\t// return `${cloudinaryBase}/f_auto,q_auto,w_800/${encodedUrl}`;\r\n\r\n\t\t// Since we don't have Cloudinary credentials, we'll just return the original URL for now\r\n\t\treturn url;\r\n\t}\r\n\treturn url;\r\n};\r\n\r\nconst getImageDimensions = (url) => {\r\n\t// Simple image dimension estimation based on container\r\n\t// For gallery thumbnails (w-full h-64 object-cover)\r\n\tif (url.includes('/images/')) {\r\n\t\treturn {\r\n\t\t\twidth: 800,\r\n\t\t\theight: 400,\r\n\t\t};\r\n\t}\r\n\treturn {\r\n\t\twidth: 1200,\r\n\t\theight: 800,\r\n\t};\r\n};\r\n\r\nconst ImageOptimizer = ({\r\n\tsrc,\r\n\talt,\r\n\tclassName,\r\n\tsizes = '100vw',\r\n\tpriority = false,\r\n}) => {\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst [error, setError] = useState(false);\r\n\tconst [optimizedSrc, setOptimizedSrc] = useState('');\r\n\r\n\t// Responsive image breakpoints\r\n\tconst breakpoints = [320, 640, 768, 1024, 1280];\r\n\r\n\tuseEffect(() => {\r\n\t\t// Get optimized version for the main image\r\n\t\tconst optimizedWebpUrl = getOptimizedImageUrl(src, 800, 'webp');\r\n\t\tsetOptimizedSrc(optimizedWebpUrl);\r\n\r\n\t\t// Preload the image\r\n\t\tconst img = new Image();\r\n\t\timg.src = optimizedWebpUrl;\r\n\t\timg.onload = () => setLoading(false);\r\n\t\timg.onerror = () => {\r\n\t\t\t// Fallback to original format if WebP fails\r\n\t\t\tconsole.warn('WebP image failed to load:', optimizedWebpUrl);\r\n\t\t\tsetError(true);\r\n\t\t\tconst fallbackImg = new Image();\r\n\t\t\tfallbackImg.src = src;\r\n\t\t\tfallbackImg.onload = () => setLoading(false);\r\n\t\t\tfallbackImg.onerror = () => setError(true);\r\n\t\t};\r\n\t}, [src]);\r\n\r\n\t// Generate srcset for responsive images\r\n\tconst generateSrcSet = () => {\r\n\t\treturn breakpoints\r\n\t\t\t.map((bp) => `${getOptimizedImageUrl(src, bp, 'webp')} ${bp}w`)\r\n\t\t\t.join(', ');\r\n\t};\r\n\r\n\tif (error) {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName={`bg-gray-200 flex items-center justify-center ${className}`}\r\n\t\t\t>\r\n\t\t\t\t<span>Failed to load image</span>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\tconst { width, height } = getImageDimensions(src);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{loading && (\r\n\t\t\t\t<div className={`bg-gray-200 animate-pulse ${className}`} />\r\n\t\t\t)}\r\n\t\t\t<img\r\n\t\t\t\tsrc={optimizedSrc || src}\r\n\t\t\t\tsrcSet={generateSrcSet()}\r\n\t\t\t\twidth={width}\r\n\t\t\t\theight={height}\r\n\t\t\t\talt={alt}\r\n\t\t\t\tclassName={`${className} ${loading ? 'hidden' : ''}`}\r\n\t\t\t\tloading={priority ? 'eager' : 'lazy'}\r\n\t\t\t\tsizes={sizes}\r\n\t\t\t\tstyle={{ opacity: loading ? 0 : 1 }}\r\n\t\t\t\tfetchPriority={priority ? 'high' : 'auto'}\r\n\t\t\t\tonError={(e) => {\r\n\t\t\t\t\t// If optimized image fails, fallback to original\r\n\t\t\t\t\tconsole.warn('Image failed to load:', e.target.src);\r\n\t\t\t\t\tif (e.target.src !== src) {\r\n\t\t\t\t\t\te.target.src = src;\r\n\t\t\t\t\t}\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n\t\t\t{priority && (\r\n\t\t\t\t<link\r\n\t\t\t\t\trel=\"preload\"\r\n\t\t\t\t\thref={optimizedSrc || src}\r\n\t\t\t\t\tas=\"image\"\r\n\t\t\t\t\tfetchPriority=\"high\"\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default ImageOptimizer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\n\r\nimport { Helmet } from 'react-helmet-async';\r\nimport LoadingSpinner from '../components/LoadingSpinner';\r\nimport { API } from '../api';\r\nimport ImageOptimizer from '../components/ImageOptimizer';\r\n\r\nconst GalleryPage = () => {\r\n\tconst [galleryData, setGalleryData] = useState([]);\r\n\tconst [loading, setLoading] = useState(true);\r\n\tconst location = useLocation();\r\n\r\n\tconst fetchGalleryData = async () => {\r\n\t\ttry {\r\n\t\t\tconst response = await API.get('/images');\r\n\t\t\tconst data = response.data;\r\n\r\n\t\t\t// Group images by category and remove any duplicate entries\r\n\t\t\tconst uniqueCategories = new Set(); // To track unique categories\r\n\t\t\tconst groupedData = data.reduce((acc, image) => {\r\n\t\t\t\tconst category = image.category || 'unknown';\r\n\t\t\t\tif (!uniqueCategories.has(category)) {\r\n\t\t\t\t\tuniqueCategories.add(category);\r\n\t\t\t\t\tacc[category] = [];\r\n\t\t\t\t}\r\n\t\t\t\tacc[category].push(image);\r\n\t\t\t\treturn acc;\r\n\t\t\t}, {});\r\n\r\n\t\t\tconst formattedData = Object.keys(groupedData).map((category) => ({\r\n\t\t\t\tid: category,\r\n\t\t\t\ttitle: category.charAt(0).toUpperCase() + category.slice(1),\r\n\t\t\t\timages: groupedData[category].sort(\r\n\t\t\t\t\t(a, b) => (a.order ?? 0) - (b.order ?? 0),\r\n\t\t\t\t),\r\n\t\t\t}));\r\n\r\n\t\t\tsetGalleryData(formattedData);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Error fetching gallery data:', error);\r\n\t\t} finally {\r\n\t\t\tsetLoading(false);\r\n\t\t}\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tfetchGalleryData();\r\n\t}, [location.pathname]);\r\n\r\n\tif (loading) {\r\n\t\treturn <LoadingSpinner />;\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div id=\"gallery\" className=\"py-12 bg-gray-100 mt-20\">\r\n\t\t\t<div className=\"max-w-7xl mx-auto px-4\">\r\n\t\t\t\t<h1 className=\"text-4xl font-bold text-center mb-12\">\r\n\t\t\t\t\tUtforsk Arbeidet Mitt\r\n\t\t\t\t\t<Helmet>\r\n\t\t\t\t\t\t<title>Utforsk Arbeidet Mitt</title>\r\n\t\t\t\t\t\t<meta\r\n\t\t\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\t\t\tcontent=\"Se mine nyeste fotografier i bryllup, natur, portrett, og mer.\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{/* Add preconnect and dns-prefetch for AWS S3 */}\r\n\t\t\t\t\t\t<link\r\n\t\t\t\t\t\t\trel=\"preconnect\"\r\n\t\t\t\t\t\t\thref=\"https://ds-photo.s3.eu-north-1.amazonaws.com\"\r\n\t\t\t\t\t\t\tcrossOrigin=\"anonymous\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<link\r\n\t\t\t\t\t\t\trel=\"dns-prefetch\"\r\n\t\t\t\t\t\t\thref=\"https://ds-photo.s3.eu-north-1.amazonaws.com\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Helmet>\r\n\t\t\t\t</h1>\r\n\t\t\t\t<div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8\">\r\n\t\t\t\t\t{galleryData.map((section, index) => (\r\n\t\t\t\t\t\t<Link\r\n\t\t\t\t\t\t\tto={`/gallery/${section.id}`}\r\n\t\t\t\t\t\t\tkey={section.id}\r\n\t\t\t\t\t\t\tclassName=\"relative block group rounded-lg overflow-hidden shadow-lg transform transition-transform hover:scale-105\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{section.images && section.images.length > 0 ? (\r\n\t\t\t\t\t\t\t\t<ImageOptimizer\r\n\t\t\t\t\t\t\t\t\tsrc={section.images[0].url}\r\n\t\t\t\t\t\t\t\t\talt={section.title}\r\n\t\t\t\t\t\t\t\t\tclassName=\"w-full h-64 object-cover\"\r\n\t\t\t\t\t\t\t\t\tsizes=\"(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw\"\r\n\t\t\t\t\t\t\t\t\tpriority={index < 3} // Prioritize first 3 images (visible on most screens)\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<div className=\"w-full h-64 bg-gray-300 flex items-center justify-center\">\r\n\t\t\t\t\t\t\t\t\t<p>No image available</p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t<div className=\"absolute inset-0 flex items-center justify-center\">\r\n\t\t\t\t\t\t\t\t<h3 className=\"dancing-script-gallery-title text-4xl md:text-6xl text-white text-center drop-shadow-lg\">\r\n\t\t\t\t\t\t\t\t\t{section.title}\r\n\t\t\t\t\t\t\t\t</h3>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default GalleryPage;\r\n"],"names":["_ref","src","alt","className","sizes","priority","loading","setLoading","useState","error","setError","optimizedSrc","setOptimizedSrc","breakpoints","useEffect","optimizedWebpUrl","getOptimizedImageUrl","img","Image","onload","onerror","console","warn","fallbackImg","_jsx","concat","children","width","height","includes","_jsxs","_Fragment","srcSet","map","bp","join","style","opacity","fetchPriority","onError","e","target","rel","href","as","GalleryPage","galleryData","setGalleryData","location","useLocation","async","data","API","get","uniqueCategories","Set","groupedData","reduce","acc","image","category","has","add","push","formattedData","Object","keys","id","title","charAt","toUpperCase","slice","images","sort","a","b","_a$order","_b$order","order","fetchGalleryData","pathname","LoadingSpinner","Helmet","name","content","crossOrigin","section","index","Link","to","length","ImageOptimizer","url"],"sourceRoot":""}